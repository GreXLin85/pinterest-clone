// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  password  String
  Role      Role      @relation(fields: [roleId], references: [id])
  roleId    Int
  posts     Post[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]

  @@map("users")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  permissions Permission[]
  users       User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("roles")
}

enum Permission {
  READ_USER
  CREATE_USER
  UPDATE_USER
  DELETE_USER

  READ_ROLE
  CREATE_ROLE
  UPDATE_ROLE
  DELETE_ROLE

  READ_PERMISSION
  CREATE_PERMISSION
  UPDATE_PERMISSION
  DELETE_PERMISSION

  READ_POST
  CREATE_POST
  UPDATE_POST
  DELETE_POST

  READ_COMMENT
  CREATE_COMMENT
  UPDATE_COMMENT
  DELETE_COMMENT
}

model Post {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String
  image     String
  content   String
  published Boolean   @default(false)
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  comments  Comment[]

  @@map("posts")
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  likes     Int      @default(0)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int

  @@map("comments")
}
